abline(lm(mpg~drat))
plot(mpg ~ wt, main="mpg vs wt")
abline(lm(mpg~wt))
plot(mpg ~ qsec, main="mpg vs qsec")
abline(lm(mpg~qsec))
boxplot(mpg ~ vs, main="mpg vs V/S")
boxplot(mpg ~ gear, main="mpg vs gear")
boxplot(mpg ~ carb, main="mpg vs carb")
fit1 <- lm(mpg ~ am, mtcars)
#  Model 2a mpg ~ am + wt
fit2a <- update(fit1, mpg ~ am + carb, mtcars)
#  Model 2b mpg ~ am + carb
fit2b <- update(fit1, mpg ~ am + qsec, mtcars)
#  Model 3a mpg ~ am + wt + carb
fit3 <- update(fit1, mpg ~ am + carb + qsec, mtcars)
summary(fit1)
#Interpret coefficients:
#  Intercept 17.1  ... significant
#  Slope 7.245 ... significant
anova(fit1, fit2a, fit3)
##  adding carb is statistically significant
##  not necessary to add carb + qsec
anova(fit1, fit2b, fit3)
fit1 <- lm(mpg ~ am, mtcars)
#  Model 2a mpg ~ am + wt
fit2a <- update(fit1, mpg ~ am + carb==4, mtcars)
#  Model 2b mpg ~ am + carb
fit2b <- update(fit1, mpg ~ am + qsec, mtcars)
#  Model 3a mpg ~ am + wt + carb
fit3 <- update(fit1, mpg ~ am + carb==4 + qsec, mtcars)
summary(fit1)
#Interpret coefficients:
#  Intercept 17.1  ... significant
#  Slope 7.245 ... significant
anova(fit1, fit2a, fit3)
##  adding carb is statistically significant
##  not necessary to add carb + qsec
anova(fit1, fit2b, fit3)
##  adding qsec is statistically significant
##  potentially beneficial  to add carb + qsec
carb==4
fit1 <- lm(mpg ~ am, mtcars)
summary(fit1)
fit1 <- lm(mpg ~ factor(am), mtcars)
summary(fit1)
fitcarb0 <- lm(formula = mpg ~ factor(carb))
summary(fitcarb0)$coeff
fitcarb0 <- lm(formula = mpg ~ carb)
summary(fitcarb0)$coeff
fit1 <- lm(mpg ~ am, mtcars)
#  Model 2a mpg ~ am + wt
fit2a <- update(fit1, mpg ~ am + factor(carb==4), mtcars)
#  Model 2b mpg ~ am + carb
fit2b <- update(fit1, mpg ~ am + qsec, mtcars)
#  Model 3a mpg ~ am + wt + carb
fit3 <- update(fit1, mpg ~ am + factor(carb==4) + qsec, mtcars)
summary(fit1)
#Interpret coefficients:
#  Intercept 17.1  ... significant
#  Slope 7.245 ... significant
anova(fit1, fit2a, fit3)
summary(fit1)
#Interpret coefficients:
#  Intercept 17.1  ... significant
#  Slope 7.245 ... significant
anova(fit1, fit2a, fit3)
##  adding carb is statistically significant
##  not necessary to add carb + qsec
anova(fit1, fit2b, fit3)
carb==4
factor(carb==4)
carb4 <- 1*carb==4
carb==4
carb4
carb4 <- (carb==4) * 1.
carb4 <- (carb==4) * 1
carb4 <- 1 * (carb==4)
carb4 <- 1 * carb==4
carb4 <- 1 * (carb==4)
fit1 <- lm(mpg ~ am, mtcars)
#  Model 2a mpg ~ am + wt
carb4 <- 1 * (carb==4) 2 #carb4==1 if carb==4, else 0
fit2a <- update(fit1, mpg ~ am + carb4, mtcars)
#  Model 2b mpg ~ am + carb
fit2b <- update(fit1, mpg ~ am + qsec, mtcars)
#  Model 3a mpg ~ am + wt + carb
fit3 <- update(fit1, mpg ~ am + carb4 + qsec, mtcars)
fit1 <- lm(mpg ~ am, mtcars)
#  Model 2a mpg ~ am + wt
carb4 <- 1 * (carb==4)  #carb4==1 if carb==4, else 0
fit2a <- update(fit1, mpg ~ am + carb4, mtcars)
#  Model 2b mpg ~ am + carb
fit2b <- update(fit1, mpg ~ am + qsec, mtcars)
#  Model 3a mpg ~ am + wt + carb
fit3 <- update(fit1, mpg ~ am + carb4 + qsec, mtcars)
summary(fit1)
#Interpret coefficients:
#  Intercept 17.1  ... significant
#  Slope 7.245 ... significant
anova(fit1, fit2a, fit3)
##  adding carb is statistically significant
##  not necessary to add carb + qsec
anova(fit1, fit2b, fit3)
fit <- lm(mpg ~ am + qsec, mtcars)
summary(fit)$coeff
summary(fit)
carb4 <- 1 * (carb==4)  #carb4==1 if carb==4, else 0
fitcarb2 <- lm(formula = mpg ~ carb4)
summary(fitcarb2)$coeff
summary(fitcarb2)
summary(fitcarb1)
fitcarb0 <- lm(formula = mpg ~ carb)
summary(fitcarb0)$coeff
fitcarb1 <- lm(formula = mpg ~ factor(carb))
summary(fitcarb1)$coeff
summary(fitcarb1)
fitcarb1 <- lm(formula = mpg ~ factor(carb))
summary(fitcarb1)$coeff
carb4 <- 1 * (carb==4)  #carb4==1 if carb==4, else 0
fitcarb2 <- lm(formula = mpg ~ carb4)
summary(fitcarb2)$coeff
par(mfrow=c(2,2))
res <- resid(fit)
plot(res, main="Residuals vs Index")
abline(h=mean(res))
#hist(res, main="Histogram of Residuals")
plot(predict(fit), res, main="Residuals vs predicted values")
abline(h=mean(res))
boxplot(resid(fit) ~ am, main="Residuals vs am")
boxplot(resid(fit) ~ carb, main="Residuals vs carb type")
min(qsec)
max(qsec)
fitFinal <- lm(mpg ~ am + I(qsec - mean(qsec)), mtcars)
summary(fitFinal)
mean(qsec)
qsec - mean(qsec)
par(mfrow=c(1,1))
pairs(mtcars)
par(mfrow=c(3,3))
boxplot(cyl ~ am, main="am vs cyl")
boxplot(disp ~ am, main="am vs disp")
boxplot(hp ~ am, main="am vs hp")
boxplot(drat ~ am, main="am vs drat")
boxplot(wt ~ am, main="am vs wt")
boxplot(qsec ~ am, main="am vs qsec")
boxplot(vs ~ am, main="am vs V/S")
boxplot(gear ~ am, main="am vs gear")
boxplot(carb ~ am, main="am vs carb")
boxplot(mpg ~ carb, main="mpg vs carb")
par(mfrow=c(1,1))
boxplot(mpg ~ carb, main="mpg vs carb")
carb4 <- 1 * (carb>=3)  #carb4==1 if carb==4, else 0
fitcarb2 <- lm(formula = mpg ~ carb4)
summary(fitcarb2)$coeff
fit1 <- lm(mpg ~ am, mtcars)
#  Model 2a mpg ~ am + wt
fit2a <- update(fit1, mpg ~ am + carb4, mtcars)
#  Model 2b mpg ~ am + carb
fit2b <- update(fit1, mpg ~ am + qsec, mtcars)
#  Model 3a mpg ~ am + wt + carb
fit3 <- update(fit1, mpg ~ am + carb4 + qsec, mtcars)
summary(fit1)
anova(fit1, fit2a, fit3)
anova(fit1, fit2b, fit3)
##  adding qsec is statistically significant
##  adding carb4 + qsec is not necessary
carb4 <- 1 * (carb>=1)  #carb4==1 if carb==4, else 0
fitcarb2 <- lm(formula = mpg ~ carb4)
summary(fitcarb2)$coeff
#             Estimate Std. Error   t value     Pr(>|t|)
#(Intercept) 22.045455   1.139526 19.346154 1.706511e-18
#carb4       -6.255455   2.038447 -3.068736 4.530681e-03
#Test various models with different covariate adjustments:
#  Investigate adding vs carb and am vs qsec
#  Model 1 (Base) mpg ~ am
fit1 <- lm(mpg ~ am, mtcars)
#  Model 2a mpg ~ am + wt
fit2a <- update(fit1, mpg ~ am + carb4, mtcars)
#  Model 2b mpg ~ am + carb
fit2b <- update(fit1, mpg ~ am + qsec, mtcars)
#  Model 3a mpg ~ am + wt + carb
fit3 <- update(fit1, mpg ~ am + carb4 + qsec, mtcars)
summary(fit1)
#Interpret coefficients:
#  Intercept 17.1  ... significant
#  Slope 7.245 ... significant
anova(fit1, fit2a, fit3)
##  adding carb4 + qsec is statistically significant
anova(fit1, fit2b, fit3)
carb4 <- factor(carb)
fitcarb2 <- lm(formula = mpg ~ carb4)
summary(fitcarb2)$coeff
#             Estimate Std. Error   t value     Pr(>|t|)
#(Intercept) 22.045455   1.139526 19.346154 1.706511e-18
#carb4       -6.255455   2.038447 -3.068736 4.530681e-03
#Test various models with different covariate adjustments:
#  Investigate adding vs carb and am vs qsec
#  Model 1 (Base) mpg ~ am
fit1 <- lm(mpg ~ am, mtcars)
#  Model 2a mpg ~ am + wt
fit2a <- update(fit1, mpg ~ am + carb4, mtcars)
#  Model 2b mpg ~ am + carb
fit2b <- update(fit1, mpg ~ am + qsec, mtcars)
#  Model 3a mpg ~ am + wt + carb
fit3 <- update(fit1, mpg ~ am + carb4 + qsec, mtcars)
summary(fit1)
#Interpret coefficients:
#  Intercept 17.1  ... significant
#  Slope 7.245 ... significant
anova(fit1, fit2a, fit3)
##  adding carb4 + qsec is statistically significant
anova(fit1, fit2b, fit3)
Model:  mpg = B0 + B1 x am + B2 x qsec2 + error
```{r showtable, results="asis"}
data(mtcars)
attach(mtcars)
qsec2 <- qsec - mean(qsec)
fit <- lm(mpg ~ am + qsec2, mtcars)
summary(fit)
library(xtable)
xt <- xtable(summary(fit))
print(xt, type="html")
```
#xxxxxxxxxxxxxxxxxxxx
print(xt, type="html")
output: pdf_document
output: pdf
The mtcars data in R was used to answer these questions.  After basic exploratory analysis and consideration of several models, the following model was determined to best answer this question:   Model:  mpg = B0 + B1 x am + B2 x qsec2 + error  where:
*qsec2 is each car's 1/4 mile time (seconds), adjusted by the mean value.
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
pnorm((.93-100)/10)
pnorm((93-100)/10)
qnorm(.05, 100, 10, lower.tail=false)
qnorm(.05, 100, 10, lower.tail=FALSE)
qnorm(.05, 100, 10, lower.tail=T)
qnorm(.95, 100, 10, lower.tail=T)
50/sqrt(10)
qnorm(.95, 100, 50/sqrt(10), lower.tail=T)
qnorm(.95, 100, 10/sqrt(50), lower.tail=T)
pbinom(4, 6, .5, lower.tail=F)
pnorm(.51,.5, sqrt(1/1200), lower.tail=F)
sum(1:6)
sum(1:6)/6
c(1:6)
c(1:6)^2
sum(c(1:6)^2)/6
sum(c(1:6)^2)/6-sum(1:6)/6
sum(c(1:6)^2)/6-(sum(1:6)/6)^2
ppois(20, 33, lower.tail=T)
data(mtcars)
str(mtcars)
attach(mtcars)
mpg
mean(mpg)
sd(mpg)
var(mpg)
qnorm(.95)
qnorm(.975)
mean(mpg)+c(-1,1)*qnrom(.95)*sd(mpg)
mean(mpg)+c(-1,1)*qnorm(.95)*sd(mpg)
mean(mpg)+c(-1,1)*qt(.95)*sd(mpg)
mean(mpg)+c(-1,1)*qt(.95, df=length(mpg))*sd(mpg)
mean(mpg)+c(-1,1)*qt(.975, df=length(mpg))*sd(mpg)
df=length(mpg)
t.test(mpg)
mean(mpg)+c(-1,1)*qt(.975, df=length(mpg))*sd(mpg)/sqrt(32)
mean(mpg)+c(-1,1)*qnorm(.975)*sd(mpg)/sqrt(32)
qt(.95,df=9)
qt(.975,df=9)
qt(.975,df=9, lower.tail=F)
qt(.975,df=9)/3
qt(.975,df=8)
qt(.975,df=8)/3
cyl
mpg[cyl==4]
mean(mpg[cyl==4])
mean(mpg[cyl==6])
mpg[cyl<=6]
cyl<=6
length(mpg[cyl<=6])
sd(mpg[cyl<=6])
sd(mpg[cyl<=6])/sqrt(18)
qt(.975,df=17)
mean(mpg[cyl==4])-mean(mpg[cyl==6]) +c(-1,1)* qt(.975,df=17)*sd(mpg[cyl<=6])/sqrt(18)
m4 <- mtcars$mpg[mtcars$cyl == 4]
m6 <- mtcars$mpg[mtcars$cyl == 6]
confint <- as.vector(t.test(m4, m6, var.equal = TRUE)$conf.int)
confint
t.test(m4, m6, var.equal = TRUE)
mean(mpg[cyl==4])-mean(mpg[cyl==6]) +c(-1,1)* qt(.975,df=16)*sd(mpg[cyl<=6])/sqrt(18)
t.test(m4, m6, var.equal = TRUE, conf.level=0.975)
t.test(m4, m6, var.equal = TRUE, conf.level=0.95)
mean(mpg[cyl==4])-mean(mpg[cyl==6]) +c(-1,1)* qt(.975,df=16)*sd(mpg[cyl<=6])/sqrt(16)
qt(.975,df=16)
qt(.95,df=16)
qt(.95,df=16/2)
mean(mpg[cyl==4])-mean(mpg[cyl==6]) +c(-1,1)* 3.8952*sd(mpg[cyl<=6])/sqrt(16)
sd(mpg[cyl<=6])
qt(.95,df=length(mtcars)-1
qt(.95,df=length(mtcars)-1)
length(mtcars)
length(mpg)
attach(mtcars)
length(mpg)
qt(.95,df=length(mpg)-1)
mean(mpg)
mean(mpg)-qt(.95,df=length(mpg)-1)*sd(mpg)/sqrt(length(mpg))
mean(mpg)+qt(.95,df=length(mpg)-1)*sd(mpg)/sqrt(length(mpg))
qt(.975,8)
qt(.975,8)/3
diffMPG = mpg[cyl==4]-mpg[cyl==6]
diffMPG = mean(mpg[cyl==4])-mean(mpg[cyl==6])
length(cyl==4])
length(cyl==4)
length(mpg[cyl==4])
length(mpg[cyl==6])
1/(1/11 + 1/7)
qt(.975,16)
sd(mpg[cyl<=6])
cyl<=6
cyl
diffMPG - qt(.975,16)*sd(mpg[cyl<=6])/sqrt(4.3)
mpg46 <- mpg[cyl<=6]
mpg46
sd(mpg46)
diffMPG + qt(.975,16)*sd(mpg[cyl<=6])/sqrt(4.3)
mpg4 <- mpg[cyl==4]
mpg6 <- mpg[cyl==6]
n4<-length(mpg4)
n6 <- length(mpg6)
sp <- sqrt(((n4-1)*sd(mpg4)^2+(n6-1)*sd(mpg6)^2)/(n4+n6-2))
sp
difMPG +c(-1,1)*qt(.975,(n4+n6-1))*sp/sqrt(1/(1/n4+1/n6))
diffMPG +c(-1,1)*qt(.975,(n4+n6-1))*sp/sqrt(1/(1/n4+1/n6))
diffMPG +c(-1,1)*qt(.975,(n4+n6-2))*sp/sqrt(1/(1/n4+1/n6))
t.test(mpg4, mpg6)
t.test(mpg4, mpg6, var.equal=T)
(8*1.5^2+8*1.8^2)/16
rm(list=ls)
rm(list=ls())
data(mtcars)
attach(mtcars)
mean(mpg)
sd(mpg)
length(mpg)
qnorm(.05)
qnorm(.95)
mean(mpg)+c(-1,1)*sd(mpg)/sqrt(31)
mean(mpg)+c(-1,1)*sd(mpg)/sqrt(32)
mn <- mean(mtcars$mpg)
s <- sd(mtcars$mpg)
z <- qnorm(.05)
mu0 <- mn - z * s / sqrt(nrow(mtcars))
sd(mpg)
nrow(mtcars)
z * s / sqrt(nrow(mtcars))
mean(mpg)+c(-1,1)*qnorm(.95)*sd(mpg)/sqrt(31)
mpg4 <- mpg(cyl==4)
mpg4 <- mpg[cyl==4]
mpg6 <- mpg[cyl==6]
t.test(mpg4, mpg6, var.equal=F, conf.leve=0.95)
qnorm(.975)
3.0 +c(-1,1)*qnorm(.975)*1.1/10
pbinom(55,100,.5)
pbinom(54,100,.5)
pbinom(54,100,.5. lower.tail=F)
pbinom(54,100,.5, lower.tail=F)
choose(100,55)
choose(100,55)*.5^100
choose(100,100)*.5^100
choose(100,56)*.5^100
x<-55:100
x
f1 <- function (xVal) choose(100, xVal)*.5^100
sapply(x, f1)
sum(sapply(x, f1))
pbinom(54,100,.5, lower.tail=F)
binom.text(55,100, .5, alternative="greater", conf.level=0.95)
binom.test(55,100, .5, alternative="greater", conf.level=0.95)
binom.test(95,100, .5, alternative="greater", conf.level=0.95)
binom.test(50,100, .5, alternative="greater", conf.level=0.95)
binom.test(5,100, .5, alternative="greater", conf.level=0.95)
binom.test(5,100, .5, alternative="two", conf.level=0.95)
binom.test(50,100, .5, alternative="two", conf.level=0.95)
ppois(526.7, 520)
ppois(15800, 520*30)
ppois(15800, 15600)
ppois(15800, 15600, lower.tail=F)
ppois(15800, 15600)+ppois(15800, 15600, lower.tail=F)
ppois(15600, 15600, lower.tail=F)
ppois(15601, 15600, lower.tail=F)
ppois(15599, 15600, lower.tail=F)
ppois(15799, 15600, lower.tail=F)
ppois(15800, 15600, lower.tail=F)
pnorm(15800, mean=520*30, sd=sqrt(520), lower.tail=F)
pnorm(15800, mean=520*30, sd=sqrt(520/30), lower.tail=F)
pnorm(15800, mean=520*30, sd=sqrt(520*30), lower.tail=F)
qnorm(.05)
qnorm(.025)
pnorm(-1,0,4)
pnorm(-.1,0,4)
pnorm(0,0,4)
sqrt(1/100+1/100)
4*sqrt(1/100+1/100)
pnorm(-1,0,4*sqrt(1/100+1/100))
m1 <- 10; m2 <- 11
n1 <- n2 <- 100
s <- 4
se <- s * sqrt(1 / n1 + 1 / n2)
pnorm(-1,0,4*sqrt(1/100+1/100))
2*pnorm(-1,0,4*sqrt(1/100+1/100))
4/sqrt(100+100)
qnorm(.95)
pnorm(1.645, 11, 4)
pnorm(1.645, 1, 4)
qnorm(.95)
qnorm(.975)
qnorm(.95)-2.5
pnorm(-0.855)
pnorm(-0.355)
pnorm(-0.355, lower.tail=F)
pnorm(-0.855, lower.tail=F)
qnorm(.975)
qnorm(.95)
qnorm(0.8, lower.tail=F)
(1/(qnorm(.95)+qnorm(.8, lower.tail=F)))^2
data(mtcars)
attach(mtcars)
mpg6<-mpg[cyl==6]
mpg8<-mpg[cyl==8]
t.test(mpg6, mpg8, var.equal=T)
mean(mpg6)-mean(mpg8)
sd(mpg6)
sd(mpg8)
(6*sd(mpg6)+13*sd(mpg8))/19
sqrt((6*sd(mpg6)+13*sd(mpg8))/19)
sp<-sqrt((6*sd(mpg6)+13*sd(mpg8))/19)
se <- sp*sqrt(1/7+1/14)
pnorm(mean(mpg6)-mean(mpg8), 0, sd=se)
pnorm(mean(mpg6)-mean(mpg8), 0, sd=se,lower.tail=F)
t.test(mpg6, mpg8, var.equal=T)
t.test(mpg6, mpg8, paired.equal=F,var.equal=T)
t.test(mpg6, mpg8, paired.equal=F,alternative="two.sided",var.equal=T)
mixprob <- (n8 - 1) / (n8 + n6 - 2)
s <- sqrt(mixprob * s8 ^ 2  +  (1 - mixprob) * s6 ^ 2)
n6<-length(mpg6)
n8<-length(mpg8)
mixprob <- (n8 - 1) / (n8 + n6 - 2)
s <- sqrt(mixprob * s8 ^ 2  +  (1 - mixprob) * s6 ^ 2)
s8<-sd(mpg8)
s6<-mpg6
s6<-sd(mpg6)
mixprob <- (n8 - 1) / (n8 + n6 - 2)
s <- sqrt(mixprob * s8 ^ 2  +  (1 - mixprob) * s6 ^ 2)
s
sp<-sqrt((6*sd(mpg6)+13*sd(mpg8))/19)
(n8 + n6 - 2)
(n8 - 1)
(1 - mixprob)
6/19
sp<-sqrt((6*sd(mpg6)^2+13*sd(mpg8)^2)/19)
sp
se <- sp *sqrt(1/7+1/14)
pnrom(4.64,0, sd=se)
pnorm(4.64,0, sd=se)
pnorm(4.64,0, sd=se, lower.tail=F)
qt(.95, df=19)
qt(.975, df=19)
qnorm(.995)
#Practical Machine Learning - Course Project
#General Area:  Human Activity Recognition
#Website:  http://groupware.les.inf.puc-rio.br/har
library (ggplot2); library(caret)
setwd("~/Documents/Personal/R/Coursera/PracticalMachineLearning/Course Project")
training <- read.csv("pml-training.csv")
dim(training)
names(training)
#19622   160
testing <- read.csv("pml-testing.csv")
columns <- c("user_name", "new_window", "num_window", "roll_belt", "pitch_belt", "yaw_belt",
"total_accel_belt", "gyros_belt_x", "gyros_belt_y", "gyros_belt_z", "accel_belt_x",
"accel_belt_y", "accel_belt_z", "magnet_belt_x", "magnet_belt_y", "magnet_belt_z",
"roll_arm", "pitch_arm", "yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y",
"gyros_arm_z", "accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y",
"magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "gyros_dumbbell_x",
"gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x", "accel_dumbbell_y",
"accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z",
"roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm", "gyros_forearm_x",
"gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x", "accel_forearm_y", "accel_forearm_z",
"magnet_forearm_x", "magnet_forearm_y", "magnet_forearm_z")
training <- training[, c(columns, "classe")]
dim(training)
#19622    55
str(training)
#Examine Structure - are variable classes correct (Factor, int, and num)?
training$num_window <- factor(training$num_window)
#apply same updates to test dataset
testing <- testing[,columns]
testing$num_window <- factor(testing$num_window)
head(training)
str(training)
any(is.na(training))
#FALSE - No NA left in dataset
featurePlot(x=training[1:100,columns[1:10], y= training[1:100, "classe"]])
featurePlot(x=training[1:100,columns[1:10]], y= training[1:100, "classe"])
training[1:100, "classe"]
training[1:100,columns[1:10]]
featurePlot(x=training[1:100,columns[1:10]], y= training[1:100, "classe"], plot="pairs")
featurePlot(x=training[1:100,columns[11:20]], y= training[1:100, "classe"], plot="pairs")
featurePlot(x=training[1:100,columns[21:30]], y= training[1:100, "classe"], plot="pairs")
featurePlot(x=training[1:100,columns[31:40]], y= training[1:100, "classe"], plot="pairs")
featurePlot(x=training[,columns[31:40]], y= training[, "classe"], plot="pairs")
