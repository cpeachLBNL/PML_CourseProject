#apply same updates to test dataset
testing <- testing[,columns]
testing$num_window <- factor(testing$num_window)
head(training)
str(training)
any(is.na(training))
#FALSE - No NA left in dataset
#Exploratory Analysis?
#Create Train and Cross Validation (xvalid) datasets
inTrain <- createDataPartition(training$classe, p=.8, list=FALSE)
train <- training[inTrain,]
xvalid <- training[-inTrain,]
#Run Random Forest
#modFit <- train(classe ~ ., data=train, method="rf")
trControl = trainControl(method = "cv", number = 4, allowParallel = TRUE, verboseIter = TRUE)
modFit <- train(classes ~. data = training, method = "rf" , prox = TRUE, trControl=trControl)
modFit <- train(classes ~ ., data = train, method = "rf" , prox = TRUE, trControl=trControl)
modFit <- train(classe ~ ., data = train, method = "rf" , prox = TRUE, trControl=trControl)
rfObj = randomForest(classe ~ ., data = train, ntree=100)
library (ggplot2); library(caret); library(randomForest)
setwd("~/Documents/Personal/R/Coursera/PracticalMachineLearning/Course Project")
training <- read.csv("pml-training.csv")
dim(training)
names(training)
#19622   160
testing <- read.csv("pml-testing.csv")
columns <- c("user_name", "new_window", "num_window", "roll_belt", "pitch_belt", "yaw_belt",
"total_accel_belt", "gyros_belt_x", "gyros_belt_y", "gyros_belt_z", "accel_belt_x",
"accel_belt_y", "accel_belt_z", "magnet_belt_x", "magnet_belt_y", "magnet_belt_z",
"roll_arm", "pitch_arm", "yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y",
"gyros_arm_z", "accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y",
"magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "gyros_dumbbell_x",
"gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x", "accel_dumbbell_y",
"accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z",
"roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm", "gyros_forearm_x",
"gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x", "accel_forearm_y", "accel_forearm_z",
"magnet_forearm_x", "magnet_forearm_y", "magnet_forearm_z")
training <- training[, c(columns, "classe")]
dim(training)
#19622    55
str(training)
#Examine Structure - are variable classes correct (Factor, int, and num)?
#training$num_window <- factor(training$num_window)
#apply same updates to test dataset
testing <- testing[,columns]
#testing$num_window <- factor(testing$num_window)
head(training)
str(training)
any(is.na(training))
#FALSE - No NA left in dataset
#Exploratory Analysis?
#Create Train and Cross Validation (xvalid) datasets
inTrain <- createDataPartition(training$classe, p=.8, list=FALSE)
train <- training[inTrain,]
xvalid <- training[-inTrain,]
#Run Random Forest
#modFit <- train(classe ~ ., data=train, method="rf")
rfObj = randomForest(classe ~ ., data = train, ntree=100)
predict.randomForest(rfObj, train)
predict(rfObj, train, predict.all=TRUE)
predict(rfObj, test, predict.all=TRUE)
predict(rfObj, xvalid, predict.all=TRUE)
pred <- predict(rfObj, xvalid, predict.all=TRUE)
class(pred)
names(pred)
str(pred)
head(pred)
head(pred,1)
pred <- predict(rfObj, test, predict.all=TRUE)
pred <- predict(rfObj, testing, predict.all=TRUE)
pred <- predict(rfObj, testing)
str(testing)
str(test)
str(train)
train$magnet_forearm_y
train$magnet_forearm_z
training$magnet_forearm_y
int(training$magnet_forearm_y)
as.int(training$magnet_forearm_y)
as.integer(training$magnet_forearm_y)
training$magnet_forearm_y <- as.integer(training$magnet_forearm_y)
training$magnet_forearm_z <- as.integer(training$magnet_forearm_z)
#Practical Machine Learning - Course Project
#General Area:  Human Activity Recognition
#Website:  http://groupware.les.inf.puc-rio.br/har
library (ggplot2); library(caret); library(randomForest)
setwd("~/Documents/Personal/R/Coursera/PracticalMachineLearning/Course Project")
training <- read.csv("pml-training.csv")
dim(training)
names(training)
#19622   160
testing <- read.csv("pml-testing.csv")
columns <- c("user_name", "new_window", "num_window", "roll_belt", "pitch_belt", "yaw_belt",
"total_accel_belt", "gyros_belt_x", "gyros_belt_y", "gyros_belt_z", "accel_belt_x",
"accel_belt_y", "accel_belt_z", "magnet_belt_x", "magnet_belt_y", "magnet_belt_z",
"roll_arm", "pitch_arm", "yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y",
"gyros_arm_z", "accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y",
"magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "gyros_dumbbell_x",
"gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x", "accel_dumbbell_y",
"accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z",
"roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm", "gyros_forearm_x",
"gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x", "accel_forearm_y", "accel_forearm_z",
"magnet_forearm_x", "magnet_forearm_y", "magnet_forearm_z")
training <- training[, c(columns, "classe")]
training$magnet_forearm_y <- as.integer(training$magnet_forearm_y)
training$magnet_forearm_z <- as.integer(training$magnet_forearm_z)
dim(training)
#19622    55
str(training)
#Examine Structure - are variable classes correct (Factor, int, and num)?
#training$num_window <- factor(training$num_window)
#apply same updates to test dataset
testing <- testing[,columns]
#testing$num_window <- factor(testing$num_window)
head(training)
str(training)
any(is.na(training))
#FALSE - No NA left in dataset
#Exploratory Analysis?
#Create Train and Cross Validation (xvalid) datasets
inTrain <- createDataPartition(training$classe, p=.8, list=FALSE)
train <- training[inTrain,]
xvalid <- training[-inTrain,]
#Run Random Forest
#modFit <- train(classe ~ ., data=train, method="rf")
#trControl = trainControl(method = "cv", number = 4, allowParallel = TRUE, verboseIter = TRUE)
#modFit <- train(classe ~ ., data = train, method = "rf" , prox = TRUE, trControl=trControl)
rfObj = randomForest(classe ~ ., data = train, ntree=100)
pred <- predict(rfObj, testing)
train
str(train)
str(testing)
pred <- predict(rfObj, testing)
#Practical Machine Learning - Course Project
#General Area:  Human Activity Recognition
#Website:  http://groupware.les.inf.puc-rio.br/har
library (ggplot2); library(caret); library(randomForest)
setwd("~/Documents/Personal/R/Coursera/PracticalMachineLearning/Course Project")
training <- read.csv("pml-training.csv")
dim(training)
names(training)
#19622   160
testing <- read.csv("pml-testing.csv")
#DROPPED:  "user_name", "new_window", "num_window",
columns <- c("roll_belt", "pitch_belt", "yaw_belt",
"total_accel_belt", "gyros_belt_x", "gyros_belt_y", "gyros_belt_z", "accel_belt_x",
"accel_belt_y", "accel_belt_z", "magnet_belt_x", "magnet_belt_y", "magnet_belt_z",
"roll_arm", "pitch_arm", "yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y",
"gyros_arm_z", "accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y",
"magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "gyros_dumbbell_x",
"gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x", "accel_dumbbell_y",
"accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z",
"roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm", "gyros_forearm_x",
"gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x", "accel_forearm_y", "accel_forearm_z",
"magnet_forearm_x", "magnet_forearm_y", "magnet_forearm_z")
training <- training[, c(columns, "classe")]
training$magnet_forearm_y <- as.integer(training$magnet_forearm_y)
training$magnet_forearm_z <- as.integer(training$magnet_forearm_z)
dim(training)
#19622    55
str(training)
#Examine Structure - are variable classes correct (Factor, int, and num)?
#training$num_window <- factor(training$num_window)
#apply same updates to test dataset
testing <- testing[,columns]
#testing$num_window <- factor(testing$num_window)
head(training)
str(training)
any(is.na(training))
#FALSE - No NA left in dataset
#Exploratory Analysis?
#Create Train and Cross Validation (xvalid) datasets
inTrain <- createDataPartition(training$classe, p=.8, list=FALSE)
train <- training[inTrain,]
xvalid <- training[-inTrain,]
#Run Random Forest
#modFit <- train(classe ~ ., data=train, method="rf")
#trControl = trainControl(method = "cv", number = 4, allowParallel = TRUE, verboseIter = TRUE)
#modFit <- train(classe ~ ., data = train, method = "rf" , prox = TRUE, trControl=trControl)
rfObj = randomForest(classe ~ ., data = train, ntree=100)
pred <- predict(rfObj, testing)
pred
rfObj = randomForest(classe ~ ., data = train, ntree=100)
pred1 <-  predict(rfObj, xvalid)
pred <- predict(rfObj, testing)
pred
pred1
xvalid
names[xvalid]
str(xvlaid)
names(xvalid)
xvalid[,-c("classe" )]
class(xvalid)
pred1 <-  predict(rfObj, xvalid[,columns])
pred1
pred1 == valid$classe
pred1 == xvalid$classe
sum(pred1 == xvalid$classe)
sum(pred1 == xvalid$classe) / nrow(xvalid)
?createFolds
?createFolds
for (n in 1:10){
print(n)
}
lstPred = list()
n=1
inTrain <- createDataPartion(training$classe, p=0.8)
train <- training[inTrain,]
xvalid <- training[-inTrain,]
rfObj = randomForest(classe ~ ., data = train, ntree=100)
inTrain <- createDataPartition(training$classe, p=0.8)
train <- training[inTrain,]
xvalid <- training[-inTrain,]
inTrain <- createDataPartition(training$classe, p=0.8, list=FALSE)
train <- training[inTrain,]
xvalid <- training[-inTrain,]
rfObj = randomForest(classe ~ ., data = train, ntree=100)
predX <-  predict(rfObj, xvalid[,columns])
acc <- sum(predX == xvalid$classe) / nrow(xvalid)
sprintf ("Case:  %i, Accuracy:  %.2f", n, acc)
lstRF[n] <- rfObj
library (ggplot2); library(caret); library(randomForest)
setwd("~/Documents/Personal/R/Coursera/PracticalMachineLearning/Course Project")
training <- read.csv("pml-training.csv")
dim(training)
names(training)
#19622   160
testing <- read.csv("pml-testing.csv")
columns <- c("roll_belt", "pitch_belt", "yaw_belt",
"total_accel_belt", "gyros_belt_x", "gyros_belt_y", "gyros_belt_z", "accel_belt_x",
"accel_belt_y", "accel_belt_z", "magnet_belt_x", "magnet_belt_y", "magnet_belt_z",
"roll_arm", "pitch_arm", "yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y",
"gyros_arm_z", "accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y",
"magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "gyros_dumbbell_x",
"gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x", "accel_dumbbell_y",
"accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z",
"roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm", "gyros_forearm_x",
"gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x", "accel_forearm_y", "accel_forearm_z",
"magnet_forearm_x", "magnet_forearm_y", "magnet_forearm_z")
training <- training[, c(columns, "classe")]
training$magnet_forearm_y <- as.integer(training$magnet_forearm_y)
training$magnet_forearm_z <- as.integer(training$magnet_forearm_z)
dim(training)
#19622    55
str(training)
#Examine Structure - are variable classes correct (Factor, int, and num)?
#apply same updates to test dataset
testing <- testing[,columns]
head(training)
str(training)
print (paste("All NA removed:  ", any(is.na(training))==FALSE))
lstRF = list()
for (n in 1:10){
inTrain <- createDataPartition(training$classe, p=0.8, list=FALSE)
train <- training[inTrain,]
xvalid <- training[-inTrain,]
rfObj = randomForest(classe ~ ., data = train, ntree=100)
predX <-  predict(rfObj, xvalid[,columns])
acc <- sum(predX == xvalid$classe) / nrow(xvalid)
sprintf ("Case:  %i, Accuracy:  %.2f", n, acc)
lstRF[n] <- rfObj
}
lstRF = list()
n = 1
inTrain <- createDataPartition(training$classe, p=0.8, list=FALSE)
train <- training[inTrain,]
xvalid <- training[-inTrain,]
rfObj = randomForest(classe ~ ., data = train, ntree=100)
predX <-  predict(rfObj, xvalid[,columns])
acc <- sum(predX == xvalid$classe) / nrow(xvalid)
sprintf ("Case:  %i, Accuracy:  %.2f", n, acc)
lstRF[n] <- rfObj
lstRF = list(10)
lstRF[n] <- rfObj
lstRF = list()
lstRF = list()
lstRF[[n]] <- rfObj
n=2
lstRF[[n]] <- rfObj
lstRF = list()
nRuns <- 10
sumAcc <- 0
for (n in 1:nRuns){
inTrain <- createDataPartition(training$classe, p=0.8, list=FALSE)
train <- training[inTrain,]
xvalid <- training[-inTrain,]
rfObj = randomForest(classe ~ ., data = train, ntree=100)
predX <-  predict(rfObj, xvalid[,columns])
acc <- sum(predX == xvalid$classe) / nrow(xvalid)
sumAcc <- sumAcc + sumAcc
sprintf ("Case:  %i, Accuracy:  %.2f", n, acc)
lstRF[[n]] <- rfObj
}
acc <- sumAcc / nRuns
acc
sumAcc
lstRF
acc
lstRF = list()
nRuns <- 10
sumAcc <- 0
for (n in 1:nRuns){
inTrain <- createDataPartition(training$classe, p=0.8, list=FALSE)
train <- training[inTrain,]
xvalid <- training[-inTrain,]
rfObj = randomForest(classe ~ ., data = train, ntree=100)
predX <-  predict(rfObj, xvalid[,columns])
acc <- sum(predX == xvalid$classe) / nrow(xvalid)
sumAcc <- sumAcc + acc
sprintf ("Case:  %i, Accuracy:  %.2f", n, acc)
lstRF[[n]] <- rfObj
}
avgAcc <- sumAcc / nRuns
avgAcc
sprintf("Overall Accuracy:  %.2f", avgAcc)
sprintf("Overall Accuracy:  %.2f", avgAcc*100)
sprintf("Overall Accuracy:  %.2f%%", avgAcc*100)
pred <- predict(rfObj, testing)
pred
lstPred <- list()
lstPred <- list()
for (n in 1:nRuns){
pred <- predict(rfObj, testing)
lstPred[[n]] <- pred
}
lstPred
lastPred[1]
lstPred[1]
lstPred[1]==lstPred[2]
lstPred[[1]]==lstPred[[2]]
lstPred <- list()
for (n in 1:nRuns){
pred <- predict(rfObj, testing)
lstPred[[n]] <- pred
#Check for consistent prediction
if (n > 1)
print(sprintf("Pred n same as previous: %s", lstPred[[n]] == lstPred[[n-1]]))
}
nRuns
pred <- predict(rfObj, testing)
pred
lstPred <- list()
for (n in 1:nRuns){
pred <- predict(lstRF[[n]], testing)
lstPred[[n]] <- pred
#Check for consistent prediction
if (n > 1)
print(sprintf("Pred n same as previous: %s", pred == lstPred[[n-1]]))
}
lstPred <- list()
for (n in 1:1){
pred <- predict(lstRF[[n]], testing)
lstPred[[n]] <- pred
#Check for consistent prediction
if (n > 1)
print(sprintf("Pred n same as previous: %s", pred == lstPred[[n-1]]))
}
lstPred <- list()
for (n in 1:2){
pred <- predict(lstRF[[n]], testing)
lstPred[[n]] <- pred
#Check for consistent prediction
if (n > 1)
print(sprintf("Pred n same as previous: %s", pred == lstPred[[n-1]]))
}
pred == lstPred[[n-1]
pred == lstPred[[n-1]]
lstPred <- list()
for (n in 1:2){
pred <- predict(lstRF[[n]], testing)
lstPred[[n]] <- pred
#Check for consistent prediction
if (n > 1)
print(sprintf("Pred n same as previous: %s", all(pred == lstPred[[n-1]])))
}
lstPred <- list()
for (n in 1:nRuns){
pred <- predict(lstRF[[n]], testing)
lstPred[[n]] <- pred
#Check for consistent prediction
if (n > 1)
print(sprintf("Pred n same as previous: %s", all(pred == lstPred[[n-1]])))
}
lstRF <- list()
nRuns <- 10
sumAcc <- 0
for (n in 1:nRuns){
inTrain <- createDataPartition(training$classe, p=0.8, list=FALSE)
train <- training[inTrain,]
xvalid <- training[-inTrain,]
rfObj = randomForest(classe ~ ., data = train, ntree=100)
predX <-  predict(rfObj, xvalid[,columns])
acc <- sum(predX == xvalid$classe) / nrow(xvalid)
sumAcc <- sumAcc + acc
print(sprintf ("Case:  %i, Accuracy:  %.2f%%", n, acc*100))
lstRF[[n]] <- rfObj
}
avgAcc <- sumAcc / nRuns
sprintf("Overall Accuracy:  %.2f%%", avgAcc*100)
#Use each rfObj (from lstRF) to output a prediction:
lstPred <- list()
for (n in 1:nRuns){
pred <- predict(lstRF[[n]], testing)
lstPred[[n]] <- pred
#Check for consistent prediction
if (n > 1)
print(sprintf("Pred n same as previous: %s", all(pred == lstPred[[n-1]])))
}
#Use each rfObj (from lstRF) to output a prediction:
lstPred <- list()
for (n in 1:nRuns){
pred <- predict(lstRF[[n]], testing)
lstPred[[n]] <- pred
#Check for consistent prediction
if (n > 1)
print(sprintf("Pred %i same as previous: %s", n, all(pred == lstPred[[n-1]])))
}
pred <- lstPred[1]
pred
pml_write_files(lstPred[1])
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("/results/problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(lstPred[1])
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(lstPred[1])
?setwd()
setwd("~/Documents/Personal/R/Coursera/PracticalMachineLearning/Course Project/results")
lstPred[1]
pred <- lstPred[[1]]
pred
setwd("~/Documents/Personal/R/Coursera/PracticalMachineLearning/Course Project/results")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pred <- lstPred[[1]]
pml_write_files(pred)
setwd("~/Documents/Personal/R/Coursera/PracticalMachineLearning/Course Project/results")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE, eol=NULL)
}
}
pred <- lstPred[[1]]
pml_write_files(pred)
setwd("~/Documents/Personal/R/Coursera/PracticalMachineLearning/Course Project/results")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE, eol="")
}
}
pred <- lstPred[[1]]
pml_write_files(pred)
setwd("~/Documents/Personal/R/Coursera/PracticalMachineLearning/Course Project/results")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE, eol="")
}
}
pred <- lstPred[[1]]
pml_write_files(pred)
setwd("~/Documents/Personal/R/Coursera/PracticalMachineLearning/Course Project/results")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE, eol="")
}
}
pred <- lstPred[[1]]
pml_write_files(pred)
lstRF <- list()
nRuns <- 10
sumAcc <- 0
for (n in 1:nRuns){
inTrain <- createDataPartition(training$classe, p=0.9, list=FALSE)
train <- training[inTrain,]
xvalid <- training[-inTrain,]
rfObj = randomForest(classe ~ ., data = train, ntree=1000)
predX <-  predict(rfObj, xvalid[,columns])
acc <- sum(predX == xvalid$classe) / nrow(xvalid)
sumAcc <- sumAcc + acc
print(sprintf ("Case:  %i, Accuracy:  %.2f%%", n, acc*100))
lstRF[[n]] <- rfObj
}
